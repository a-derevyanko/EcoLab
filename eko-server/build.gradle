import org.ekolab.gradle.CustomTest

apply plugin: 'war'
apply plugin: 'org.springframework.boot'

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:+")
    }
}

dependencies {
    compile project (':eko-db')
    compile group: 'javax.servlet',             name: 'javax.servlet-api',                          version: '+'

    compile group: 'org.springframework',       name: 'spring-context-support',                      version: '+'
    compile group: 'org.springframework.boot',  name: 'spring-boot-starter-aop',                    version: '1.5.3.RELEASE'

    compile group: 'org.springframework.boot',  name: 'spring-boot-starter-jetty',                  version: '+'
    compile group: 'org.springframework.boot',  name: 'spring-boot-starter-security',               version: '+'
    compile group: 'org.springframework.boot',  name: 'spring-boot-starter-cache',                  version: '+'
    compile group: 'org.springframework.boot',  name: 'spring-boot-starter-validation',             version: '+'
    compile group: 'org.springframework.boot',  name: 'spring-boot-starter-web',                    version: '+'
    compile group: 'org.springframework.boot',  name: 'spring-boot-configuration-processor',        version: '+'
    compile group: 'org.springframework.boot',  name: 'spring-boot-starter-actuator',               version: '+'

    compile group: 'org.springframework.boot',  name: 'spring-boot-starter-jdbc',                   version: '+'

    compile group: 'com.zaxxer',                name: 'HikariCP',                                   version: '+'

    compile group: 'com.github.ben-manes.caffeine', name: 'caffeine',                               version: '+'

    compile group: 'de.codecentric',                name: 'spring-boot-admin-server',               version: '+'
    compile group: 'de.codecentric',                name: 'spring-boot-admin-server-ui',            version: '+'
    compile group: 'org.jolokia',                   name: 'jolokia-core',                           version: '1.3.5'



    compile group: 'com.twelvemonkeys.imageio',     name: 'imageio-batik',                      version: '3.3.2'
    compile group: 'org.apache.xmlgraphics',        name: 'batik-transcoder',                   version: '1.8'
    compile group: 'org.apache.xmlgraphics',        name: 'batik-codec',                        version: '1.7'
    compile group: 'org.apache.xmlgraphics',        name: 'xmlgraphics-commons',                version: '1.5'

    compile group: 'net.sf.jasperreports',          name: 'jasperreports',                      version: '6.4.0'
    compile group: 'com.lowagie',                   name: 'itext',                              version: '2.1.7'
    compile group: 'org.olap4j',                    name: 'olap4j',                             version: '1.2.0'

    // TODO
    runtime     group: 'com.h2database',            name: 'h2',                                 version: '+'
    runtime     group: 'org.postgresql',            name: 'postgresql',                         version: '+'

    providedRuntime group: 'org.springframework.boot',  name: 'spring-boot-starter-jetty',      version: '+'

    testCompile group: 'com.h2database',            name: 'h2',                                 version: '+'
}

war {
    baseName = 'EkoLab-Server'
    version =  '0.0.1'
}

bootRun {
    systemProperties(System.properties)
    jvmArgs = ["-Dspring.profiles.active=dev,h2", "-Dorg.jooq.no-logo=true"]
    addResources = true
}

bootRepackage {
    enabled = false
}

check.dependsOn.remove(test)
build.dependsOn.remove(test)

task testH2(type:CustomTest){
    systemProperties(System.properties)
    jvmArgs = ["-Dspring.profiles.include=dev,h2"]
}

task testPostgres(type:CustomTest){
    systemProperties(System.properties)
    jvmArgs = ["-Dspring.profiles.include=dev,h2"]
}

task test(type: DefaultTask, overwrite: true) {
    dependsOn testH2
    dependsOn testPostgres
}

def customProperties = ["spring.datasource.url" : "jdbc:h2:file:$project.rootProject.projectDir/$h2File;IFEXISTS=TRUE".toString(),
                        "spring.datasource.username":'user',
                        "spring.datasource.password":'password']

task writeCustomProperties {
    def file = file("${sourceSets.main.resources.srcDirs.first().path}/application-custom.properties")

    def newProperties = new Properties(customProperties)

    if (!file.createNewFile()) {
        def existingProperties = new Properties()
        file.withInputStream { stream -> existingProperties.load(stream) }

        existingProperties.forEach(newProperties.&replace)
    }

    file.withOutputStream { stream -> newProperties.store(stream, null) }
}

processResources.dependsOn writeCustomProperties

check.dependsOn test
build.dependsOn test